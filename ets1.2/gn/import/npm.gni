# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

if (!defined(koala_mr)) {
    # OHOS build tree workaround
    import("../../../koala_integration.gni")
}

template("npm_cmd") {
    if (!defined(invoker.panda_sdk_path)) {
        invoker.panda_sdk_path = rebase_path(koala_mr.panda_sdk_path)
    }
    action("$target_name") {
        script = "${koala_mr.scripts_path}/npm.py"
        if (!defined(invoker.outputs)) {
            outputs = [
                "$target_out_dir/$target_name"
            ]
        } else {
            outputs = invoker.outputs
        }
        if (defined(invoker.sources)) {
            sources = invoker.sources
        }
        if (defined(invoker.deps)) {
            deps = invoker.deps
        }
        if (defined(invoker.inputs)) {
            inputs = invoker.inputs
        }
        if (defined(invoker.external_deps)) {
            external_deps = invoker.external_deps
        }

        args = [
            "--project-path", invoker.project_path
        ]
        if (defined(invoker.panda_sdk_path)) {
            args += [ "--panda-sdk-path", invoker.panda_sdk_path ]
        }
        if (defined(invoker.koala_node_path)) {
            args += [ "--node-path", invoker.koala_node_path ]
        }
        if (defined(invoker.target_out_path)) {
            args += [ "--target-out-path", invoker.target_out_path ]
        }
        if (defined(invoker.built_file_path)) {
            args += [ "--built-file-path", invoker.built_file_path ]
        }
        if (defined(invoker.install) && invoker.install) {
            args += [ "--install" ]
        }
        if (defined(invoker.install_path)) {
            args += [ "--install-path", invoker.install_path ]
        }
        if (defined(invoker.run_tasks)) {
            args += [ "--run-tasks" ] + invoker.run_tasks
        }
    }
}

template("npm_install") {
    forward_variables_from(invoker, "*")
    npm_cmd(target_name) {
        if (!defined(sources)) {
            sources = [
                "$project_path/package.json"
            ]
        }
        install = true
    }
}